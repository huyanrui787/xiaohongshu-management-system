import { Request, Response, NextFunction } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { User } from '../models/User';
import { createError } from '../middleware/errorHandler';
import { AuthRequest } from '../middleware/auth';
import { Op } from 'sequelize';

export class AuthController {
  async register(req: Request, res: Response, next: NextFunction) {
    try {
      const { username, email, password, role = 'operator' } = req.body;

      const existingUser = await User.findOne({
        where: {
          [Op.or]: [{ email }, { username }]
        }
      });

      if (existingUser) {
        throw createError('User already exists', 400);
      }

      const hashedPassword = await bcrypt.hash(password, 12);

      const user = await User.create({
        username,
        email,
        password: hashedPassword,
        role,
        isActive: true,
        permissions: this.getDefaultPermissions(role)
      });

      const token = this.generateToken(user.id.toString());

      res.status(201).json({
        success: true,
        data: {
          user: {
            id: user.id,
            username: user.username,
            email: user.email,
            role: user.role,
            permissions: user.permissions
          },
          token
        }
      });
    } catch (error) {
      next(error);
    }
  }

  async login(req: Request, res: Response, next: NextFunction) {
    try {
      const { email, password } = req.body;

      const user = await User.findOne({ where: { email } });
      if (!user) {
        throw createError('Invalid credentials', 401);
      }

      if (!user.isActive) {
        throw createError('Account is deactivated', 401);
      }

      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        throw createError('Invalid credentials', 401);
      }

      user.lastLogin = new Date();
      await user.save();

      const token = this.generateToken(user.id.toString());

      res.json({
        success: true,
        data: {
          user: {
            id: user.id,
            username: user.username,
            email: user.email,
            role: user.role,
            permissions: user.permissions,
            avatar: user.avatar
          },
          token
        }
      });
    } catch (error) {
      next(error);
    }
  }

  async logout(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      res.json({
        success: true,
        message: 'Logged out successfully'
      });
    } catch (error) {
      next(error);
    }
  }

  async getProfile(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      const user = await User.findByPk(req.user!.id, {
        attributes: { exclude: ['password'] }
      });
      
      res.json({
        success: true,
        data: { user }
      });
    } catch (error) {
      next(error);
    }
  }

  async updateProfile(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      const { username, avatar } = req.body;
      
      const user = await User.findByPk(req.user!.id);
      if (!user) {
        throw createError('User not found', 404);
      }

      user.username = username;
      user.avatar = avatar;
      await user.save();

      const updatedUser = await User.findByPk(user.id, {
        attributes: { exclude: ['password'] }
      });

      res.json({
        success: true,
        data: { user: updatedUser }
      });
    } catch (error) {
      next(error);
    }
  }

  async changePassword(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      const { currentPassword, newPassword } = req.body;

      const user = await User.findByPk(req.user!.id);
      if (!user) {
        throw createError('User not found', 404);
      }

      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password);
      if (!isCurrentPasswordValid) {
        throw createError('Current password is incorrect', 400);
      }

      const hashedNewPassword = await bcrypt.hash(newPassword, 12);
      user.password = hashedNewPassword;
      await user.save();

      res.json({
        success: true,
        message: 'Password changed successfully'
      });
    } catch (error) {
      next(error);
    }
  }

  async refreshToken(req: Request, res: Response, next: NextFunction) {
    try {
      const { token } = req.body;

      if (!token) {
        throw createError('Token is required', 400);
      }

      const decoded = jwt.verify(token, process.env.JWT_SECRET!) as { userId: string };
      const user = await User.findByPk(decoded.userId);

      if (!user || !user.isActive) {
        throw createError('Invalid token', 401);
      }

      const newToken = this.generateToken(user.id.toString());

      res.json({
        success: true,
        data: { token: newToken }
      });
    } catch (error) {
      next(error);
    }
  }

  private generateToken(userId: string): string {
    return jwt.sign(
      { userId },
      process.env.JWT_SECRET!,
      { expiresIn: process.env.JWT_EXPIRE || '7d' }
    );
  }

  private getDefaultPermissions(role: string): string[] {
    const permissions = {
      admin: [
        'account:*', 'content:*', 'task:*', 'analytics:*', 'user:*'
      ],
      operator: [
        'account:read', 'account:create', 'account:update', 'account:manage',
        'content:read', 'content:create', 'content:update', 'content:publish', 'content:review',
        'task:read', 'task:create', 'task:execute',
        'analytics:read', 'analytics:create'
      ],
      viewer: [
        'account:read', 'content:read', 'task:read', 'analytics:read'
      ]
    };

    return permissions[role as keyof typeof permissions] || permissions.viewer;
  }
}